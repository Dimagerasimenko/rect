{"version":3,"sources":["reportWebVitals.js","components/app-header/app-header.js","components/post-status-filter/post-staus-filter.js","components/search-panel/search-panel.js","components/post-list/post-list-item/post-list-item.js","components/post-list/post-list.js","components/post-add-form/post-add-form.js","components/app/app.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Header","styled","div","props","colored","AppHeader","appHeader","name","surname","amountPosts","amountLikes","PostStatusFilter","buttons","label","this","map","item","atr","filter","Button","type","onClick","onFilterSelect","color","className","Component","SearchPanel","onUpdateSearch","e","term","target","value","setState","state","placeholder","onChange","PostListItem","onDelete","classNames","important","like","onToggleLike","onToggleImportant","PostList","posts","ListGroup","i","id","iProps","key","PostAddForm","getInputValue","text","onSubmit","preventDefault","onAddNewFormItem","AppBlock","App","searchPost","items","length","indexOf","filterPost","newLabel","nextId","index","findIndex","changingItem","newItem","slice","visibilityPosts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c12450a.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport './app-header.css';\r\nimport styled from 'styled-components';\r\n\r\nconst Header = styled.div`\r\n    display: flex;\r\n    align-items: flex-end;\r\n    justify-content: space-between;\r\n    h1 {\r\n      font-size: 26px;\r\n      color: ${props => props.colored ? 'red' : 'black'}\r\n      :hover {\r\n        color: blue;\r\n      }\r\n    }\r\n    h2 {\r\n      font-size: 1.2rem;\r\n        color: grey;\r\n    }\r\n`;\r\n\r\n\r\nfunction AppHeader(props) {\r\n    const {name, surname} = props.appHeader;\r\n\r\n    return (\r\n        <Header colored>\r\n            <h1>{name} {surname}</h1>\r\n            <h2>{props.amountPosts} записей, из них понравилось {props.amountLikes}</h2>\r\n        </Header>)\r\n}\r\n\r\nexport default AppHeader;","import React, {Component} from 'react';\r\nimport {Button} from 'reactstrap';\r\nimport './post-status-filter.css';\r\n\r\n\r\nclass PostStatusFilter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.buttons = [\r\n            {name: 'all', label: 'Все'},\r\n            {name: 'like', label: 'Понравилось'},\r\n        ]\r\n\r\n    }\r\n\r\n    render() {\r\n        const buttons = this.buttons.map((item) => {\r\n            const active = this.props.filter === item.name;\r\n            const atr = active ? 'success' : 'secondary';\r\n\r\n            return (\r\n                <Button\r\n                    key={item.name}\r\n                    type={'button'}\r\n                    onClick={() => {\r\n                        this.props.onFilterSelect(item.name);\r\n                    }}\r\n                    color={atr}>\r\n\r\n                    {item.label}\r\n                </Button>\r\n            )\r\n        })\r\n        return <div className='btn__group'>\r\n            {buttons}\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default PostStatusFilter;","import React, {Component} from 'react';\r\nimport './search-panel.css'\r\nimport PostStatusFilter from \"../post-status-filter/post-staus-filter\";\r\n\r\nclass SearchPanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: ''\r\n        }\r\n    }\r\n\r\n    onUpdateSearch = (e) => {\r\n        const term = e.target.value;\r\n        this.setState({term});\r\n        this.props.onUpdateSearch(term);\r\n    }\r\n\r\n    render() {\r\n        return <div className={'search-panel'}>\r\n            <input\r\n                type=\"text\"\r\n                className={'form-control search-input'}\r\n                placeholder={'Поиск по записям'}\r\n                onChange={this.onUpdateSearch}\r\n            />\r\n            <PostStatusFilter\r\n                onFilterSelect={this.props.onFilterSelect}\r\n                filter={this.props.filter}/>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nexport default SearchPanel;","import React from 'react';\r\nimport './post-list-item.css';\r\n\r\nfunction PostListItem(props) {\r\n    const {label, onDelete, important, like} = props;\r\n    let classNames = 'app-list-item d-flex justify-content-between';\r\n\r\n    if (important) {\r\n        classNames += ' important';\r\n    }\r\n    if (like) {\r\n        classNames += ' like';\r\n    }\r\n    return (<li className={classNames}>\r\n            <span\r\n                className={'app-list-item-label'}\r\n                onClick={props.onToggleLike}\r\n            >\r\n                    {label}\r\n            </span>\r\n        <div\r\n            className={'d-flex justify-content-center align-items-center'}\r\n        >\r\n            <button\r\n                type={'button'}\r\n                className={'btn-star btn-sm'}\r\n                onClick={props.onToggleImportant}>\r\n                <i className={'fa fa-star'}></i>\r\n            </button>\r\n            <button\r\n                type={'button'}\r\n                className={'btn-trash btn-sm'}\r\n                onClick={onDelete}>\r\n                <i className={'fa fa-trash-o'}></i>\r\n            </button>\r\n            <i className={'fa fa-heart'}></i>\r\n        </div>\r\n\r\n    </li>)\r\n\r\n}\r\n\r\nexport default PostListItem;","import React from 'react';\r\nimport PostListItem from \"./post-list-item/post-list-item\";\r\nimport './post-list.css';\r\nimport {ListGroup} from 'reactstrap';\r\n\r\nfunction PostList({posts, onDelete, onToggleImportant, onToggleLike}) {\r\n    /*function isEmpty(obj) {\r\n        for (let k in obj) {\r\n            return false\r\n        }\r\n        return true;\r\n    }*/\r\n\r\n\r\n    return (\r\n        <ListGroup className={'app-list'}>\r\n            {posts.map(i => {\r\n                const {id, ...iProps} = i;\r\n                return <PostListItem\r\n\r\n                    {...iProps}\r\n                    key={id}\r\n                    onDelete={() => {\r\n                        onDelete(id)\r\n                    }\r\n                    }\r\n                    onToggleImportant={() => {\r\n                        onToggleImportant(id);\r\n                    }\r\n                    }\r\n                    onToggleLike={() => {\r\n                        onToggleLike(id);\r\n                    }}\r\n\r\n                />\r\n\r\n            })}\r\n        </ListGroup>\r\n    )\r\n}\r\n\r\nexport default PostList;","import React, {Component} from 'react';\r\nimport './post-add-form.css'\r\n\r\n\r\nclass PostAddForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            text: ''\r\n        }\r\n    }\r\n\r\n    getInputValue = (e) => {\r\n\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n\r\n    }\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.text !== '') {\r\n            this.props.onAddNewFormItem(this.state.text);\r\n        }\r\n\r\n        this.setState({\r\n            text: ''\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form\r\n                onSubmit={this.onSubmit}\r\n                className={'bottom-panel d-flex'}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder={'What about are you thinking now'}\r\n                    className={'form-control new-post-label'}\r\n                    onChange={this.getInputValue}\r\n                    value={this.state.text}\r\n                />\r\n                <button type={'button'}\r\n                        className={'btn btn-outline-secondary'}\r\n                        onClick={() => {\r\n                            if (this.state.text !== '') {\r\n                                this.props.onAddNewFormItem(this.state.text);\r\n                            }\r\n\r\n                        }}\r\n                >\r\n                    Add a Post\r\n                </button>\r\n            </form>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default PostAddForm;","import React, {Component} from 'react';\r\nimport nextId from \"react-id-generator\";\r\n\r\nimport './app.css';\r\nimport styled from 'styled-components';\r\n// import css from './App.module.css';\r\n\r\n\r\nimport AppHeader from \"../app-header/app-header\";\r\nimport SearchPanel from \"../search-panel/search-panel\";\r\nimport PostList from \"../post-list/post-list\";\r\nimport PostAddForm from \"../post-add-form/post-add-form\";\r\n\r\nconst AppBlock = styled.div`\r\n  margin: 0 auto;\r\n  max-width: 800px;\r\n`;\r\n\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            posts: [\r\n                {label: 'Learning CSS', important: true, like: false, id: nextId()},\r\n                {label: 'Learning JS', important: false, like: false, id: nextId()},\r\n                {label: 'Learning React', important: false, like: false, id: nextId()},\r\n            ],\r\n            term: '',\r\n            filter: 'all',\r\n            appHeader: {\r\n                name: \"Dmitry\",\r\n                surname: \"Gerasomenko\"\r\n            }\r\n        }\r\n    };\r\n\r\n    searchPost = (items, term) => {\r\n        if (term.length === 0) {\r\n            return items;\r\n        }\r\n        return items.filter(i => {\r\n            return i.label.indexOf(term) > -1;\r\n        })\r\n    }\r\n\r\n    filterPost = (items, filter) => {\r\n        if (filter === 'like') {\r\n            return items.filter(i => i.like)\r\n        } else {\r\n            return items;\r\n        }\r\n    }\r\n\r\n\r\n    onDelete = (id) => {\r\n        this.setState(({posts}) => {\r\n            const state = posts.filter(item => item.id !== id);\r\n            return {\r\n                posts: state\r\n            }\r\n        })\r\n    }\r\n\r\n    onAddNewFormItem = (text) => {\r\n\r\n        this.setState(({posts}) => {\r\n            const newLabel = {label: text, important: false, like: false, id: nextId()};\r\n            const newPosts = [...posts, newLabel];\r\n\r\n            return {\r\n                posts: newPosts\r\n            }\r\n        })\r\n    }\r\n\r\n    onToggleImportant = (id) => {\r\n        this.setState(({posts}) => {\r\n            const index = posts.findIndex(i => i.id === id);\r\n            const changingItem = posts[index];\r\n\r\n            const newItem = {...changingItem, important: !changingItem.important};\r\n            const newState = [...posts.slice(0, index), newItem, ...posts.slice(index + 1)];\r\n\r\n            return {\r\n                posts: newState\r\n            }\r\n        })\r\n    }\r\n\r\n    onToggleLike = (id) => {\r\n        this.setState(({posts}) => {\r\n            const index = posts.findIndex(i => i.id === id);\r\n            const changingItem = posts[index];\r\n\r\n            const newItem = {...changingItem, like: !changingItem.like};\r\n            const newState = [...posts.slice(0, index), newItem, ...posts.slice(index + 1)];\r\n\r\n            return {\r\n                posts: newState\r\n            }\r\n        })\r\n    }\r\n    onUpdateSearch = (term) => {\r\n        this.setState({term})\r\n    }\r\n\r\n    onFilterSelect = (filter) => {\r\n        this.setState({filter})\r\n    }\r\n\r\n    render() {\r\n        const {posts, appHeader, term, filter} = this.state;\r\n        const amountLikes = posts.filter(i => i.like).length;\r\n        const amountPosts = posts.length;\r\n        const visibilityPosts = this.filterPost(this.searchPost(posts, term), filter);\r\n        return (\r\n            <AppBlock>\r\n\r\n                <AppHeader\r\n                    appHeader={appHeader}\r\n                    amountLikes={amountLikes}\r\n                    amountPosts={amountPosts}\r\n                />\r\n\r\n                <div className=\"search-panel d-flex\">\r\n                    <SearchPanel\r\n                        filter={filter}\r\n                        onFilterSelect={this.onFilterSelect}\r\n                        onUpdateSearch={this.onUpdateSearch}/>\r\n                </div>\r\n                <PostList posts={visibilityPosts}\r\n\r\n                          onDelete={(id) => {\r\n                              this.onDelete(id)\r\n                          }}\r\n                          onToggleImportant={this.onToggleImportant}\r\n                          onToggleLike={this.onToggleLike}\r\n                />\r\n                <PostAddForm onAddNewFormItem={this.onAddNewFormItem}/>\r\n            </AppBlock>\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./components/app/app\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}